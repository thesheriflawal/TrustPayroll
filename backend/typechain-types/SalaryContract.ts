/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SalaryContract {
  export type ContractModificationStruct = {
    newDailySalary: BigNumberish;
    newEmployeeAddress: AddressLike;
    employerSigned: boolean;
    employeeSigned: boolean;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type ContractModificationStructOutput = [
    newDailySalary: bigint,
    newEmployeeAddress: string,
    employerSigned: boolean,
    employeeSigned: boolean,
    isActive: boolean,
    createdAt: bigint
  ] & {
    newDailySalary: bigint;
    newEmployeeAddress: string;
    employerSigned: boolean;
    employeeSigned: boolean;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface SalaryContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveContract"
      | "approveModification"
      | "attendanceCount"
      | "calculateEarnedSalary"
      | "codeUsed"
      | "contractDuration"
      | "dailyAttendance"
      | "dailyCodes"
      | "dailySalary"
      | "emergencyWithdraw"
      | "employee"
      | "employeeApproved"
      | "employer"
      | "factory"
      | "generateDailyCode"
      | "getAvailableBalance"
      | "getContractInfo"
      | "getCurrentDay"
      | "getDailyCodeHash"
      | "getPendingModification"
      | "hasAttendanceForDay"
      | "hasPendingModification"
      | "isActive"
      | "isOnProbation"
      | "isTerminated"
      | "markAttendance"
      | "pendingModification"
      | "probationPercentage"
      | "proposeModification"
      | "rejectModification"
      | "startDate"
      | "terminateContract"
      | "totalSalaryLocked"
      | "totalWithdrawn"
      | "withdrawSalary"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttendanceMarked"
      | "CodeGenerated"
      | "ContractTerminated"
      | "EmployeeApproved"
      | "ModificationApproved"
      | "ModificationProposed"
      | "ModificationRejected"
      | "SalaryWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveModification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attendanceCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateEarnedSalary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "codeUsed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dailyAttendance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyCodes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailySalary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "employee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "employeeApproved",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "employer", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateDailyCode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyCodeHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingModification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasAttendanceForDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingModification",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOnProbation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTerminated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markAttendance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingModification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "probationPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeModification",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectModification",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "terminateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSalaryLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSalary",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "approveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attendanceCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateEarnedSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "codeUsed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyCodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailySalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "employeeApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateDailyCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAttendanceForDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOnProbation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTerminated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "probationPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "terminateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSalaryLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSalary",
    data: BytesLike
  ): Result;
}

export namespace AttendanceMarkedEvent {
  export type InputTuple = [
    employee: AddressLike,
    day: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [employee: string, day: bigint, timestamp: bigint];
  export interface OutputObject {
    employee: string;
    day: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CodeGeneratedEvent {
  export type InputTuple = [day: BigNumberish, codeHash: BytesLike];
  export type OutputTuple = [day: bigint, codeHash: string];
  export interface OutputObject {
    day: bigint;
    codeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractTerminatedEvent {
  export type InputTuple = [
    employer: AddressLike,
    refundAmount: BigNumberish,
    employeePayout: BigNumberish
  ];
  export type OutputTuple = [
    employer: string,
    refundAmount: bigint,
    employeePayout: bigint
  ];
  export interface OutputObject {
    employer: string;
    refundAmount: bigint;
    employeePayout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeApprovedEvent {
  export type InputTuple = [employee: AddressLike];
  export type OutputTuple = [employee: string];
  export interface OutputObject {
    employee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModificationApprovedEvent {
  export type InputTuple = [newSalary: BigNumberish, newEmployee: AddressLike];
  export type OutputTuple = [newSalary: bigint, newEmployee: string];
  export interface OutputObject {
    newSalary: bigint;
    newEmployee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModificationProposedEvent {
  export type InputTuple = [newSalary: BigNumberish, newEmployee: AddressLike];
  export type OutputTuple = [newSalary: bigint, newEmployee: string];
  export interface OutputObject {
    newSalary: bigint;
    newEmployee: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModificationRejectedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryWithdrawnEvent {
  export type InputTuple = [
    employee: AddressLike,
    amount: BigNumberish,
    daysWorked: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    amount: bigint,
    daysWorked: bigint
  ];
  export interface OutputObject {
    employee: string;
    amount: bigint;
    daysWorked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SalaryContract extends BaseContract {
  connect(runner?: ContractRunner | null): SalaryContract;
  waitForDeployment(): Promise<this>;

  interface: SalaryContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveContract: TypedContractMethod<[], [void], "nonpayable">;

  approveModification: TypedContractMethod<[], [void], "nonpayable">;

  attendanceCount: TypedContractMethod<[], [bigint], "view">;

  calculateEarnedSalary: TypedContractMethod<[], [bigint], "view">;

  codeUsed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  contractDuration: TypedContractMethod<[], [bigint], "view">;

  dailyAttendance: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  dailyCodes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  dailySalary: TypedContractMethod<[], [bigint], "view">;

  emergencyWithdraw: TypedContractMethod<[], [void], "nonpayable">;

  employee: TypedContractMethod<[], [string], "view">;

  employeeApproved: TypedContractMethod<[], [boolean], "view">;

  employer: TypedContractMethod<[], [string], "view">;

  factory: TypedContractMethod<[], [string], "view">;

  generateDailyCode: TypedContractMethod<
    [_day: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAvailableBalance: TypedContractMethod<[], [bigint], "view">;

  getContractInfo: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint
      ] & {
        _employer: string;
        _employee: string;
        _dailySalary: bigint;
        _attendanceCount: bigint;
        _totalWithdrawn: bigint;
        _isActive: boolean;
        _employeeApproved: boolean;
        _isOnProbation: boolean;
        _probationPercentage: bigint;
      }
    ],
    "view"
  >;

  getCurrentDay: TypedContractMethod<[], [bigint], "view">;

  getDailyCodeHash: TypedContractMethod<[_day: BigNumberish], [string], "view">;

  getPendingModification: TypedContractMethod<
    [],
    [SalaryContract.ContractModificationStructOutput],
    "view"
  >;

  hasAttendanceForDay: TypedContractMethod<
    [_day: BigNumberish],
    [boolean],
    "view"
  >;

  hasPendingModification: TypedContractMethod<[], [boolean], "view">;

  isActive: TypedContractMethod<[], [boolean], "view">;

  isOnProbation: TypedContractMethod<[], [boolean], "view">;

  isTerminated: TypedContractMethod<[], [boolean], "view">;

  markAttendance: TypedContractMethod<
    [_day: BigNumberish, _code: string],
    [void],
    "nonpayable"
  >;

  pendingModification: TypedContractMethod<
    [],
    [
      [bigint, string, boolean, boolean, boolean, bigint] & {
        newDailySalary: bigint;
        newEmployeeAddress: string;
        employerSigned: boolean;
        employeeSigned: boolean;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  probationPercentage: TypedContractMethod<[], [bigint], "view">;

  proposeModification: TypedContractMethod<
    [_newDailySalary: BigNumberish, _newEmployeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  rejectModification: TypedContractMethod<[], [void], "nonpayable">;

  startDate: TypedContractMethod<[], [bigint], "view">;

  terminateContract: TypedContractMethod<[], [void], "nonpayable">;

  totalSalaryLocked: TypedContractMethod<[], [bigint], "view">;

  totalWithdrawn: TypedContractMethod<[], [bigint], "view">;

  withdrawSalary: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveModification"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "attendanceCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateEarnedSalary"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "codeUsed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "contractDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dailyAttendance"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "dailyCodes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "dailySalary"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "employee"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "employeeApproved"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "employer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateDailyCode"
  ): TypedContractMethod<[_day: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAvailableBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getContractInfo"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint
      ] & {
        _employer: string;
        _employee: string;
        _dailySalary: bigint;
        _attendanceCount: bigint;
        _totalWithdrawn: bigint;
        _isActive: boolean;
        _employeeApproved: boolean;
        _isOnProbation: boolean;
        _probationPercentage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDailyCodeHash"
  ): TypedContractMethod<[_day: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingModification"
  ): TypedContractMethod<
    [],
    [SalaryContract.ContractModificationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasAttendanceForDay"
  ): TypedContractMethod<[_day: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasPendingModification"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOnProbation"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTerminated"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "markAttendance"
  ): TypedContractMethod<
    [_day: BigNumberish, _code: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pendingModification"
  ): TypedContractMethod<
    [],
    [
      [bigint, string, boolean, boolean, boolean, bigint] & {
        newDailySalary: bigint;
        newEmployeeAddress: string;
        employerSigned: boolean;
        employeeSigned: boolean;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "probationPercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "proposeModification"
  ): TypedContractMethod<
    [_newDailySalary: BigNumberish, _newEmployeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectModification"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "terminateContract"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "totalSalaryLocked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawSalary"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AttendanceMarked"
  ): TypedContractEvent<
    AttendanceMarkedEvent.InputTuple,
    AttendanceMarkedEvent.OutputTuple,
    AttendanceMarkedEvent.OutputObject
  >;
  getEvent(
    key: "CodeGenerated"
  ): TypedContractEvent<
    CodeGeneratedEvent.InputTuple,
    CodeGeneratedEvent.OutputTuple,
    CodeGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "ContractTerminated"
  ): TypedContractEvent<
    ContractTerminatedEvent.InputTuple,
    ContractTerminatedEvent.OutputTuple,
    ContractTerminatedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeApproved"
  ): TypedContractEvent<
    EmployeeApprovedEvent.InputTuple,
    EmployeeApprovedEvent.OutputTuple,
    EmployeeApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ModificationApproved"
  ): TypedContractEvent<
    ModificationApprovedEvent.InputTuple,
    ModificationApprovedEvent.OutputTuple,
    ModificationApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ModificationProposed"
  ): TypedContractEvent<
    ModificationProposedEvent.InputTuple,
    ModificationProposedEvent.OutputTuple,
    ModificationProposedEvent.OutputObject
  >;
  getEvent(
    key: "ModificationRejected"
  ): TypedContractEvent<
    ModificationRejectedEvent.InputTuple,
    ModificationRejectedEvent.OutputTuple,
    ModificationRejectedEvent.OutputObject
  >;
  getEvent(
    key: "SalaryWithdrawn"
  ): TypedContractEvent<
    SalaryWithdrawnEvent.InputTuple,
    SalaryWithdrawnEvent.OutputTuple,
    SalaryWithdrawnEvent.OutputObject
  >;

  filters: {
    "AttendanceMarked(address,uint256,uint256)": TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;
    AttendanceMarked: TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;

    "CodeGenerated(uint256,bytes32)": TypedContractEvent<
      CodeGeneratedEvent.InputTuple,
      CodeGeneratedEvent.OutputTuple,
      CodeGeneratedEvent.OutputObject
    >;
    CodeGenerated: TypedContractEvent<
      CodeGeneratedEvent.InputTuple,
      CodeGeneratedEvent.OutputTuple,
      CodeGeneratedEvent.OutputObject
    >;

    "ContractTerminated(address,uint256,uint256)": TypedContractEvent<
      ContractTerminatedEvent.InputTuple,
      ContractTerminatedEvent.OutputTuple,
      ContractTerminatedEvent.OutputObject
    >;
    ContractTerminated: TypedContractEvent<
      ContractTerminatedEvent.InputTuple,
      ContractTerminatedEvent.OutputTuple,
      ContractTerminatedEvent.OutputObject
    >;

    "EmployeeApproved(address)": TypedContractEvent<
      EmployeeApprovedEvent.InputTuple,
      EmployeeApprovedEvent.OutputTuple,
      EmployeeApprovedEvent.OutputObject
    >;
    EmployeeApproved: TypedContractEvent<
      EmployeeApprovedEvent.InputTuple,
      EmployeeApprovedEvent.OutputTuple,
      EmployeeApprovedEvent.OutputObject
    >;

    "ModificationApproved(uint256,address)": TypedContractEvent<
      ModificationApprovedEvent.InputTuple,
      ModificationApprovedEvent.OutputTuple,
      ModificationApprovedEvent.OutputObject
    >;
    ModificationApproved: TypedContractEvent<
      ModificationApprovedEvent.InputTuple,
      ModificationApprovedEvent.OutputTuple,
      ModificationApprovedEvent.OutputObject
    >;

    "ModificationProposed(uint256,address)": TypedContractEvent<
      ModificationProposedEvent.InputTuple,
      ModificationProposedEvent.OutputTuple,
      ModificationProposedEvent.OutputObject
    >;
    ModificationProposed: TypedContractEvent<
      ModificationProposedEvent.InputTuple,
      ModificationProposedEvent.OutputTuple,
      ModificationProposedEvent.OutputObject
    >;

    "ModificationRejected()": TypedContractEvent<
      ModificationRejectedEvent.InputTuple,
      ModificationRejectedEvent.OutputTuple,
      ModificationRejectedEvent.OutputObject
    >;
    ModificationRejected: TypedContractEvent<
      ModificationRejectedEvent.InputTuple,
      ModificationRejectedEvent.OutputTuple,
      ModificationRejectedEvent.OutputObject
    >;

    "SalaryWithdrawn(address,uint256,uint256)": TypedContractEvent<
      SalaryWithdrawnEvent.InputTuple,
      SalaryWithdrawnEvent.OutputTuple,
      SalaryWithdrawnEvent.OutputObject
    >;
    SalaryWithdrawn: TypedContractEvent<
      SalaryWithdrawnEvent.InputTuple,
      SalaryWithdrawnEvent.OutputTuple,
      SalaryWithdrawnEvent.OutputObject
    >;
  };
}
