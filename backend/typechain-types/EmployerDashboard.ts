/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EmployerDashboard {
  export type EmployeeInfoStruct = {
    contractAddress: AddressLike;
    employeeAddress: AddressLike;
    dailySalary: BigNumberish;
    attendanceCount: BigNumberish;
    totalWithdrawn: BigNumberish;
    availableBalance: BigNumberish;
    isActive: boolean;
    employeeApproved: boolean;
    isOnProbation: boolean;
    probationPercentage: BigNumberish;
    startDate: BigNumberish;
    contractDuration: BigNumberish;
    currentDay: BigNumberish;
    todayAttendanceMarked: boolean;
    todayCodeGenerated: boolean;
  };

  export type EmployeeInfoStructOutput = [
    contractAddress: string,
    employeeAddress: string,
    dailySalary: bigint,
    attendanceCount: bigint,
    totalWithdrawn: bigint,
    availableBalance: bigint,
    isActive: boolean,
    employeeApproved: boolean,
    isOnProbation: boolean,
    probationPercentage: bigint,
    startDate: bigint,
    contractDuration: bigint,
    currentDay: bigint,
    todayAttendanceMarked: boolean,
    todayCodeGenerated: boolean
  ] & {
    contractAddress: string;
    employeeAddress: string;
    dailySalary: bigint;
    attendanceCount: bigint;
    totalWithdrawn: bigint;
    availableBalance: bigint;
    isActive: boolean;
    employeeApproved: boolean;
    isOnProbation: boolean;
    probationPercentage: bigint;
    startDate: bigint;
    contractDuration: bigint;
    currentDay: bigint;
    todayAttendanceMarked: boolean;
    todayCodeGenerated: boolean;
  };

  export type EmployerStatsStruct = {
    totalEmployees: BigNumberish;
    activeEmployees: BigNumberish;
    totalSalariesLocked: BigNumberish;
    totalPaidOut: BigNumberish;
    pendingApprovals: BigNumberish;
  };

  export type EmployerStatsStructOutput = [
    totalEmployees: bigint,
    activeEmployees: bigint,
    totalSalariesLocked: bigint,
    totalPaidOut: bigint,
    pendingApprovals: bigint
  ] & {
    totalEmployees: bigint;
    activeEmployees: bigint;
    totalSalariesLocked: bigint;
    totalPaidOut: bigint;
    pendingApprovals: bigint;
  };
}

export interface EmployerDashboardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bulkGenerateCodes"
      | "createSalaryContract"
      | "factory"
      | "generateDailyCode"
      | "generateTodaysCode"
      | "getContractDetails"
      | "getEmployeeAttendanceHistory"
      | "getEmployeesList"
      | "getEmployerStats"
      | "getTopPerformingEmployees"
      | "proposeModification"
      | "terminateContract"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CodeGenerated"
      | "ContractTerminated"
      | "EmployeeAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bulkGenerateCodes",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createSalaryContract",
    values: [AddressLike, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateDailyCode",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateTodaysCode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeAttendanceHistory",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeesList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopPerformingEmployees",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeModification",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "terminateContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkGenerateCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSalaryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateDailyCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateTodaysCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeAttendanceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeesList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopPerformingEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "terminateContract",
    data: BytesLike
  ): Result;
}

export namespace CodeGeneratedEvent {
  export type InputTuple = [
    employer: AddressLike,
    employee: AddressLike,
    day: BigNumberish
  ];
  export type OutputTuple = [employer: string, employee: string, day: bigint];
  export interface OutputObject {
    employer: string;
    employee: string;
    day: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractTerminatedEvent {
  export type InputTuple = [
    employer: AddressLike,
    employee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    employer: string,
    employee: string,
    contractAddress: string
  ];
  export interface OutputObject {
    employer: string;
    employee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmployeeAddedEvent {
  export type InputTuple = [
    employer: AddressLike,
    employee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    employer: string,
    employee: string,
    contractAddress: string
  ];
  export interface OutputObject {
    employer: string;
    employee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmployerDashboard extends BaseContract {
  connect(runner?: ContractRunner | null): EmployerDashboard;
  waitForDeployment(): Promise<this>;

  interface: EmployerDashboardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bulkGenerateCodes: TypedContractMethod<
    [_contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  createSalaryContract: TypedContractMethod<
    [
      _employee: AddressLike,
      _dailySalary: BigNumberish,
      _probationPercentage: BigNumberish,
      _isOnProbation: boolean,
      _contractDuration: BigNumberish
    ],
    [void],
    "payable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  generateDailyCode: TypedContractMethod<
    [_contractAddress: AddressLike, _day: BigNumberish],
    [void],
    "nonpayable"
  >;

  generateTodaysCode: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getContractDetails: TypedContractMethod<
    [_contractAddress: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        employee: string;
        dailySalary: bigint;
        attendanceCount: bigint;
        totalWithdrawn: bigint;
        availableBalance: bigint;
        contractBalance: bigint;
        isActive: boolean;
        employeeApproved: boolean;
        isOnProbation: boolean;
        probationPercentage: bigint;
        startDate: bigint;
        contractDuration: bigint;
      }
    ],
    "view"
  >;

  getEmployeeAttendanceHistory: TypedContractMethod<
    [_contractAddress: AddressLike, _days: BigNumberish],
    [
      [bigint[], boolean[], bigint[]] & {
        attendanceDays: bigint[];
        attendanceStatus: boolean[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;

  getEmployeesList: TypedContractMethod<
    [_employer: AddressLike],
    [EmployerDashboard.EmployeeInfoStructOutput[]],
    "view"
  >;

  getEmployerStats: TypedContractMethod<
    [_employer: AddressLike],
    [EmployerDashboard.EmployerStatsStructOutput],
    "view"
  >;

  getTopPerformingEmployees: TypedContractMethod<
    [_employer: AddressLike, _limit: BigNumberish],
    [EmployerDashboard.EmployeeInfoStructOutput[]],
    "view"
  >;

  proposeModification: TypedContractMethod<
    [
      _contractAddress: AddressLike,
      _newDailySalary: BigNumberish,
      _newEmployeeAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  terminateContract: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bulkGenerateCodes"
  ): TypedContractMethod<
    [_contractAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSalaryContract"
  ): TypedContractMethod<
    [
      _employee: AddressLike,
      _dailySalary: BigNumberish,
      _probationPercentage: BigNumberish,
      _isOnProbation: boolean,
      _contractDuration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "generateDailyCode"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _day: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "generateTodaysCode"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getContractDetails"
  ): TypedContractMethod<
    [_contractAddress: AddressLike],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        employee: string;
        dailySalary: bigint;
        attendanceCount: bigint;
        totalWithdrawn: bigint;
        availableBalance: bigint;
        contractBalance: bigint;
        isActive: boolean;
        employeeApproved: boolean;
        isOnProbation: boolean;
        probationPercentage: bigint;
        startDate: bigint;
        contractDuration: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeAttendanceHistory"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _days: BigNumberish],
    [
      [bigint[], boolean[], bigint[]] & {
        attendanceDays: bigint[];
        attendanceStatus: boolean[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeesList"
  ): TypedContractMethod<
    [_employer: AddressLike],
    [EmployerDashboard.EmployeeInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployerStats"
  ): TypedContractMethod<
    [_employer: AddressLike],
    [EmployerDashboard.EmployerStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopPerformingEmployees"
  ): TypedContractMethod<
    [_employer: AddressLike, _limit: BigNumberish],
    [EmployerDashboard.EmployeeInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposeModification"
  ): TypedContractMethod<
    [
      _contractAddress: AddressLike,
      _newDailySalary: BigNumberish,
      _newEmployeeAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "terminateContract"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CodeGenerated"
  ): TypedContractEvent<
    CodeGeneratedEvent.InputTuple,
    CodeGeneratedEvent.OutputTuple,
    CodeGeneratedEvent.OutputObject
  >;
  getEvent(
    key: "ContractTerminated"
  ): TypedContractEvent<
    ContractTerminatedEvent.InputTuple,
    ContractTerminatedEvent.OutputTuple,
    ContractTerminatedEvent.OutputObject
  >;
  getEvent(
    key: "EmployeeAdded"
  ): TypedContractEvent<
    EmployeeAddedEvent.InputTuple,
    EmployeeAddedEvent.OutputTuple,
    EmployeeAddedEvent.OutputObject
  >;

  filters: {
    "CodeGenerated(address,address,uint256)": TypedContractEvent<
      CodeGeneratedEvent.InputTuple,
      CodeGeneratedEvent.OutputTuple,
      CodeGeneratedEvent.OutputObject
    >;
    CodeGenerated: TypedContractEvent<
      CodeGeneratedEvent.InputTuple,
      CodeGeneratedEvent.OutputTuple,
      CodeGeneratedEvent.OutputObject
    >;

    "ContractTerminated(address,address,address)": TypedContractEvent<
      ContractTerminatedEvent.InputTuple,
      ContractTerminatedEvent.OutputTuple,
      ContractTerminatedEvent.OutputObject
    >;
    ContractTerminated: TypedContractEvent<
      ContractTerminatedEvent.InputTuple,
      ContractTerminatedEvent.OutputTuple,
      ContractTerminatedEvent.OutputObject
    >;

    "EmployeeAdded(address,address,address)": TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
    EmployeeAdded: TypedContractEvent<
      EmployeeAddedEvent.InputTuple,
      EmployeeAddedEvent.OutputTuple,
      EmployeeAddedEvent.OutputObject
    >;
  };
}
