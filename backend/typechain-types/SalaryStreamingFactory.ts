/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SalaryStreamingFactory {
  export type OrganizationStruct = {
    orgAddress: AddressLike;
    name: string;
    email: string;
    totalEmployees: BigNumberish;
    totalSalariesLocked: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type OrganizationStructOutput = [
    orgAddress: string,
    name: string,
    email: string,
    totalEmployees: bigint,
    totalSalariesLocked: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    orgAddress: string;
    name: string;
    email: string;
    totalEmployees: bigint;
    totalSalariesLocked: bigint;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface SalaryStreamingFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "admins"
      | "allContracts"
      | "allOrganizations"
      | "createSalaryContract"
      | "getAllContracts"
      | "getAllOrganizations"
      | "getOrganizationContracts"
      | "getOrganizationDetails"
      | "getTotalContracts"
      | "getTotalOrganizations"
      | "isOrganization"
      | "organizationContracts"
      | "organizations"
      | "owner"
      | "registerOrganization"
      | "removeAdmin"
      | "updateOrganizationStatus"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRemoved"
      | "OrganizationRegistered"
      | "SalaryContractCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "allContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allOrganizations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSalaryContract",
    values: [AddressLike, BigNumberish, BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOrganization",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "organizationContracts",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "organizations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOrganization",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrganizationStatus",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSalaryContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizationContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "organizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrganizationStatus",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationRegisteredEvent {
  export type InputTuple = [orgAddress: AddressLike, name: string];
  export type OutputTuple = [orgAddress: string, name: string];
  export interface OutputObject {
    orgAddress: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryContractCreatedEvent {
  export type InputTuple = [
    org: AddressLike,
    employee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [
    org: string,
    employee: string,
    contractAddress: string
  ];
  export interface OutputObject {
    org: string;
    employee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SalaryStreamingFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SalaryStreamingFactory;
  waitForDeployment(): Promise<this>;

  interface: SalaryStreamingFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  allContracts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  allOrganizations: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createSalaryContract: TypedContractMethod<
    [
      _employee: AddressLike,
      _dailySalary: BigNumberish,
      _probationPercentage: BigNumberish,
      _isOnProbation: boolean,
      _contractDuration: BigNumberish
    ],
    [void],
    "payable"
  >;

  getAllContracts: TypedContractMethod<[], [string[]], "view">;

  getAllOrganizations: TypedContractMethod<[], [string[]], "view">;

  getOrganizationContracts: TypedContractMethod<
    [_org: AddressLike],
    [string[]],
    "view"
  >;

  getOrganizationDetails: TypedContractMethod<
    [_org: AddressLike],
    [SalaryStreamingFactory.OrganizationStructOutput],
    "view"
  >;

  getTotalContracts: TypedContractMethod<[], [bigint], "view">;

  getTotalOrganizations: TypedContractMethod<[], [bigint], "view">;

  isOrganization: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  organizationContracts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  organizations: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean, bigint] & {
        orgAddress: string;
        name: string;
        email: string;
        totalEmployees: bigint;
        totalSalariesLocked: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerOrganization: TypedContractMethod<
    [_name: string, _email: string],
    [void],
    "nonpayable"
  >;

  removeAdmin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  updateOrganizationStatus: TypedContractMethod<
    [_org: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "allContracts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "allOrganizations"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createSalaryContract"
  ): TypedContractMethod<
    [
      _employee: AddressLike,
      _dailySalary: BigNumberish,
      _probationPercentage: BigNumberish,
      _isOnProbation: boolean,
      _contractDuration: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getAllContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllOrganizations"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOrganizationContracts"
  ): TypedContractMethod<[_org: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOrganizationDetails"
  ): TypedContractMethod<
    [_org: AddressLike],
    [SalaryStreamingFactory.OrganizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalContracts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalOrganizations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOrganization"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "organizationContracts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "organizations"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, string, bigint, bigint, boolean, bigint] & {
        orgAddress: string;
        name: string;
        email: string;
        totalEmployees: bigint;
        totalSalariesLocked: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerOrganization"
  ): TypedContractMethod<[_name: string, _email: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOrganizationStatus"
  ): TypedContractMethod<
    [_org: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationRegistered"
  ): TypedContractEvent<
    OrganizationRegisteredEvent.InputTuple,
    OrganizationRegisteredEvent.OutputTuple,
    OrganizationRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "SalaryContractCreated"
  ): TypedContractEvent<
    SalaryContractCreatedEvent.InputTuple,
    SalaryContractCreatedEvent.OutputTuple,
    SalaryContractCreatedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;

    "OrganizationRegistered(address,string)": TypedContractEvent<
      OrganizationRegisteredEvent.InputTuple,
      OrganizationRegisteredEvent.OutputTuple,
      OrganizationRegisteredEvent.OutputObject
    >;
    OrganizationRegistered: TypedContractEvent<
      OrganizationRegisteredEvent.InputTuple,
      OrganizationRegisteredEvent.OutputTuple,
      OrganizationRegisteredEvent.OutputObject
    >;

    "SalaryContractCreated(address,address,address)": TypedContractEvent<
      SalaryContractCreatedEvent.InputTuple,
      SalaryContractCreatedEvent.OutputTuple,
      SalaryContractCreatedEvent.OutputObject
    >;
    SalaryContractCreated: TypedContractEvent<
      SalaryContractCreatedEvent.InputTuple,
      SalaryContractCreatedEvent.OutputTuple,
      SalaryContractCreatedEvent.OutputObject
    >;
  };
}
