/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AttendanceManager {
  export type AttendanceCodeStruct = {
    codeHash: BytesLike;
    expiryTime: BigNumberish;
    isActive: boolean;
    employer: AddressLike;
    employee: AddressLike;
    day: BigNumberish;
    isUsed: boolean;
  };

  export type AttendanceCodeStructOutput = [
    codeHash: string,
    expiryTime: bigint,
    isActive: boolean,
    employer: string,
    employee: string,
    day: bigint,
    isUsed: boolean
  ] & {
    codeHash: string;
    expiryTime: bigint;
    isActive: boolean;
    employer: string;
    employee: string;
    day: bigint;
    isUsed: boolean;
  };
}

export interface AttendanceManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CODE_VALIDITY_DURATION"
      | "attendanceCodes"
      | "employeeAttendanceDays"
      | "employeeEmployerDayAttendance"
      | "employerDailyCodes"
      | "generateAttendanceCode"
      | "getActiveCodeForEmployeeDay"
      | "getCodeDetails"
      | "getEmployeeAttendanceDays"
      | "hasAttendanceForDay"
      | "hasEmployeeAttendedDay"
      | "isCodeValid"
      | "verifyAndMarkAttendance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AttendanceMarked" | "CodeGenerated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CODE_VALIDITY_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "attendanceCodes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeAttendanceDays",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeEmployerDayAttendance",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employerDailyCodes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateAttendanceCode",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveCodeForEmployeeDay",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCodeDetails",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeAttendanceDays",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAttendanceForDay",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasEmployeeAttendedDay",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCodeValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndMarkAttendance",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "CODE_VALIDITY_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attendanceCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeAttendanceDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeEmployerDayAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employerDailyCodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateAttendanceCode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveCodeForEmployeeDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCodeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeAttendanceDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasAttendanceForDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasEmployeeAttendedDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCodeValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndMarkAttendance",
    data: BytesLike
  ): Result;
}

export namespace AttendanceMarkedEvent {
  export type InputTuple = [
    employee: AddressLike,
    employer: AddressLike,
    day: BigNumberish,
    codeHash: BytesLike
  ];
  export type OutputTuple = [
    employee: string,
    employer: string,
    day: bigint,
    codeHash: string
  ];
  export interface OutputObject {
    employee: string;
    employer: string;
    day: bigint;
    codeHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CodeGeneratedEvent {
  export type InputTuple = [
    employer: AddressLike,
    employee: AddressLike,
    codeHash: BytesLike,
    expiryTime: BigNumberish,
    day: BigNumberish
  ];
  export type OutputTuple = [
    employer: string,
    employee: string,
    codeHash: string,
    expiryTime: bigint,
    day: bigint
  ];
  export interface OutputObject {
    employer: string;
    employee: string;
    codeHash: string;
    expiryTime: bigint;
    day: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AttendanceManager extends BaseContract {
  connect(runner?: ContractRunner | null): AttendanceManager;
  waitForDeployment(): Promise<this>;

  interface: AttendanceManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CODE_VALIDITY_DURATION: TypedContractMethod<[], [bigint], "view">;

  attendanceCodes: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean, string, string, bigint, boolean] & {
        codeHash: string;
        expiryTime: bigint;
        isActive: boolean;
        employer: string;
        employee: string;
        day: bigint;
        isUsed: boolean;
      }
    ],
    "view"
  >;

  employeeAttendanceDays: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  employeeEmployerDayAttendance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  employerDailyCodes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  generateAttendanceCode: TypedContractMethod<
    [
      _salaryContract: AddressLike,
      _employee: AddressLike,
      _day: BigNumberish,
      _nonce: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getActiveCodeForEmployeeDay: TypedContractMethod<
    [_employer: AddressLike, _employee: AddressLike, _day: BigNumberish],
    [string],
    "view"
  >;

  getCodeDetails: TypedContractMethod<
    [_codeHash: BytesLike],
    [AttendanceManager.AttendanceCodeStructOutput],
    "view"
  >;

  getEmployeeAttendanceDays: TypedContractMethod<
    [_employee: AddressLike],
    [bigint[]],
    "view"
  >;

  hasAttendanceForDay: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  hasEmployeeAttendedDay: TypedContractMethod<
    [_employee: AddressLike, _employer: AddressLike, _day: BigNumberish],
    [boolean],
    "view"
  >;

  isCodeValid: TypedContractMethod<[_codeHash: BytesLike], [boolean], "view">;

  verifyAndMarkAttendance: TypedContractMethod<
    [_salaryContract: AddressLike, _codeHash: BytesLike, _day: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CODE_VALIDITY_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "attendanceCodes"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, boolean, string, string, bigint, boolean] & {
        codeHash: string;
        expiryTime: bigint;
        isActive: boolean;
        employer: string;
        employee: string;
        day: bigint;
        isUsed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "employeeAttendanceDays"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "employeeEmployerDayAttendance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "employerDailyCodes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "generateAttendanceCode"
  ): TypedContractMethod<
    [
      _salaryContract: AddressLike,
      _employee: AddressLike,
      _day: BigNumberish,
      _nonce: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getActiveCodeForEmployeeDay"
  ): TypedContractMethod<
    [_employer: AddressLike, _employee: AddressLike, _day: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCodeDetails"
  ): TypedContractMethod<
    [_codeHash: BytesLike],
    [AttendanceManager.AttendanceCodeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeAttendanceDays"
  ): TypedContractMethod<[_employee: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasAttendanceForDay"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasEmployeeAttendedDay"
  ): TypedContractMethod<
    [_employee: AddressLike, _employer: AddressLike, _day: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCodeValid"
  ): TypedContractMethod<[_codeHash: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyAndMarkAttendance"
  ): TypedContractMethod<
    [_salaryContract: AddressLike, _codeHash: BytesLike, _day: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "AttendanceMarked"
  ): TypedContractEvent<
    AttendanceMarkedEvent.InputTuple,
    AttendanceMarkedEvent.OutputTuple,
    AttendanceMarkedEvent.OutputObject
  >;
  getEvent(
    key: "CodeGenerated"
  ): TypedContractEvent<
    CodeGeneratedEvent.InputTuple,
    CodeGeneratedEvent.OutputTuple,
    CodeGeneratedEvent.OutputObject
  >;

  filters: {
    "AttendanceMarked(address,address,uint256,bytes32)": TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;
    AttendanceMarked: TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;

    "CodeGenerated(address,address,bytes32,uint256,uint256)": TypedContractEvent<
      CodeGeneratedEvent.InputTuple,
      CodeGeneratedEvent.OutputTuple,
      CodeGeneratedEvent.OutputObject
    >;
    CodeGenerated: TypedContractEvent<
      CodeGeneratedEvent.InputTuple,
      CodeGeneratedEvent.OutputTuple,
      CodeGeneratedEvent.OutputObject
    >;
  };
}
