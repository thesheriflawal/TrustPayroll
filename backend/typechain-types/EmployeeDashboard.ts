/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace EmployeeDashboard {
  export type AttendanceRecordStruct = {
    day: BigNumberish;
    timestamp: BigNumberish;
    marked: boolean;
  };

  export type AttendanceRecordStructOutput = [
    day: bigint,
    timestamp: bigint,
    marked: boolean
  ] & { day: bigint; timestamp: bigint; marked: boolean };

  export type EmployeeContractInfoStruct = {
    contractAddress: AddressLike;
    employer: AddressLike;
    dailySalary: BigNumberish;
    attendanceCount: BigNumberish;
    totalWithdrawn: BigNumberish;
    availableBalance: BigNumberish;
    isActive: boolean;
    employeeApproved: boolean;
    isOnProbation: boolean;
    probationPercentage: BigNumberish;
    startDate: BigNumberish;
    contractDuration: BigNumberish;
    employerName: string;
  };

  export type EmployeeContractInfoStructOutput = [
    contractAddress: string,
    employer: string,
    dailySalary: bigint,
    attendanceCount: bigint,
    totalWithdrawn: bigint,
    availableBalance: bigint,
    isActive: boolean,
    employeeApproved: boolean,
    isOnProbation: boolean,
    probationPercentage: bigint,
    startDate: bigint,
    contractDuration: bigint,
    employerName: string
  ] & {
    contractAddress: string;
    employer: string;
    dailySalary: bigint;
    attendanceCount: bigint;
    totalWithdrawn: bigint;
    availableBalance: bigint;
    isActive: boolean;
    employeeApproved: boolean;
    isOnProbation: boolean;
    probationPercentage: bigint;
    startDate: bigint;
    contractDuration: bigint;
    employerName: string;
  };

  export type PendingApprovalStruct = {
    contractAddress: AddressLike;
    employer: AddressLike;
    dailySalary: BigNumberish;
    isOnProbation: boolean;
    probationPercentage: BigNumberish;
    contractDuration: BigNumberish;
    employerName: string;
  };

  export type PendingApprovalStructOutput = [
    contractAddress: string,
    employer: string,
    dailySalary: bigint,
    isOnProbation: boolean,
    probationPercentage: bigint,
    contractDuration: bigint,
    employerName: string
  ] & {
    contractAddress: string;
    employer: string;
    dailySalary: bigint;
    isOnProbation: boolean;
    probationPercentage: bigint;
    contractDuration: bigint;
    employerName: string;
  };
}

export interface EmployeeDashboardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveContract"
      | "approveModification"
      | "factory"
      | "getAttendanceHistory"
      | "getContractSummary"
      | "getEmployeeContracts"
      | "getPendingApprovals"
      | "getPendingModification"
      | "getTodaysAttendanceStatus"
      | "markAttendance"
      | "rejectModification"
      | "withdrawSalary"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttendanceMarked"
      | "ContractApproved"
      | "SalaryWithdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveModification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAttendanceHistory",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractSummary",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingApprovals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingModification",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTodaysAttendanceStatus",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markAttendance",
    values: [AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectModification",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSalary",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAttendanceHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTodaysAttendanceStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAttendance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectModification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSalary",
    data: BytesLike
  ): Result;
}

export namespace AttendanceMarkedEvent {
  export type InputTuple = [
    employee: AddressLike,
    contractAddress: AddressLike,
    day: BigNumberish
  ];
  export type OutputTuple = [
    employee: string,
    contractAddress: string,
    day: bigint
  ];
  export interface OutputObject {
    employee: string;
    contractAddress: string;
    day: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContractApprovedEvent {
  export type InputTuple = [
    employee: AddressLike,
    contractAddress: AddressLike
  ];
  export type OutputTuple = [employee: string, contractAddress: string];
  export interface OutputObject {
    employee: string;
    contractAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SalaryWithdrawnEvent {
  export type InputTuple = [employee: AddressLike, amount: BigNumberish];
  export type OutputTuple = [employee: string, amount: bigint];
  export interface OutputObject {
    employee: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EmployeeDashboard extends BaseContract {
  connect(runner?: ContractRunner | null): EmployeeDashboard;
  waitForDeployment(): Promise<this>;

  interface: EmployeeDashboardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveContract: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  approveModification: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  factory: TypedContractMethod<[], [string], "view">;

  getAttendanceHistory: TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [EmployeeDashboard.AttendanceRecordStructOutput[]],
    "view"
  >;

  getContractSummary: TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalDaysWorked: bigint;
        totalEarned: bigint;
        totalWithdrawn: bigint;
        availableBalance: bigint;
        dailyEarnings: bigint;
        canWithdraw: boolean;
      }
    ],
    "view"
  >;

  getEmployeeContracts: TypedContractMethod<
    [_employee: AddressLike],
    [EmployeeDashboard.EmployeeContractInfoStructOutput[]],
    "view"
  >;

  getPendingApprovals: TypedContractMethod<
    [_employee: AddressLike],
    [EmployeeDashboard.PendingApprovalStructOutput[]],
    "view"
  >;

  getPendingModification: TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [
      [boolean, bigint, string, boolean, boolean, bigint] & {
        hasPendingModification: boolean;
        newDailySalary: bigint;
        newEmployeeAddress: string;
        employerSigned: boolean;
        employeeSigned: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getTodaysAttendanceStatus: TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [
      [boolean, boolean, bigint, boolean] & {
        canMarkAttendance: boolean;
        alreadyMarked: boolean;
        currentDay: bigint;
        codeGenerated: boolean;
      }
    ],
    "view"
  >;

  markAttendance: TypedContractMethod<
    [_contractAddress: AddressLike, _day: BigNumberish, _code: string],
    [void],
    "nonpayable"
  >;

  rejectModification: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawSalary: TypedContractMethod<
    [_contractAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveContract"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveModification"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAttendanceHistory"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [EmployeeDashboard.AttendanceRecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractSummary"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalDaysWorked: bigint;
        totalEarned: bigint;
        totalWithdrawn: bigint;
        availableBalance: bigint;
        dailyEarnings: bigint;
        canWithdraw: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeContracts"
  ): TypedContractMethod<
    [_employee: AddressLike],
    [EmployeeDashboard.EmployeeContractInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingApprovals"
  ): TypedContractMethod<
    [_employee: AddressLike],
    [EmployeeDashboard.PendingApprovalStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingModification"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [
      [boolean, bigint, string, boolean, boolean, bigint] & {
        hasPendingModification: boolean;
        newDailySalary: bigint;
        newEmployeeAddress: string;
        employerSigned: boolean;
        employeeSigned: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTodaysAttendanceStatus"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _employee: AddressLike],
    [
      [boolean, boolean, bigint, boolean] & {
        canMarkAttendance: boolean;
        alreadyMarked: boolean;
        currentDay: bigint;
        codeGenerated: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "markAttendance"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _day: BigNumberish, _code: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rejectModification"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawSalary"
  ): TypedContractMethod<[_contractAddress: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AttendanceMarked"
  ): TypedContractEvent<
    AttendanceMarkedEvent.InputTuple,
    AttendanceMarkedEvent.OutputTuple,
    AttendanceMarkedEvent.OutputObject
  >;
  getEvent(
    key: "ContractApproved"
  ): TypedContractEvent<
    ContractApprovedEvent.InputTuple,
    ContractApprovedEvent.OutputTuple,
    ContractApprovedEvent.OutputObject
  >;
  getEvent(
    key: "SalaryWithdrawn"
  ): TypedContractEvent<
    SalaryWithdrawnEvent.InputTuple,
    SalaryWithdrawnEvent.OutputTuple,
    SalaryWithdrawnEvent.OutputObject
  >;

  filters: {
    "AttendanceMarked(address,address,uint256)": TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;
    AttendanceMarked: TypedContractEvent<
      AttendanceMarkedEvent.InputTuple,
      AttendanceMarkedEvent.OutputTuple,
      AttendanceMarkedEvent.OutputObject
    >;

    "ContractApproved(address,address)": TypedContractEvent<
      ContractApprovedEvent.InputTuple,
      ContractApprovedEvent.OutputTuple,
      ContractApprovedEvent.OutputObject
    >;
    ContractApproved: TypedContractEvent<
      ContractApprovedEvent.InputTuple,
      ContractApprovedEvent.OutputTuple,
      ContractApprovedEvent.OutputObject
    >;

    "SalaryWithdrawn(address,uint256)": TypedContractEvent<
      SalaryWithdrawnEvent.InputTuple,
      SalaryWithdrawnEvent.OutputTuple,
      SalaryWithdrawnEvent.OutputObject
    >;
    SalaryWithdrawn: TypedContractEvent<
      SalaryWithdrawnEvent.InputTuple,
      SalaryWithdrawnEvent.OutputTuple,
      SalaryWithdrawnEvent.OutputObject
    >;
  };
}
