/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace AdminDashboard {
  export type OrganizationSummaryStruct = {
    orgAddress: AddressLike;
    name: string;
    email: string;
    totalEmployees: BigNumberish;
    totalSalariesLocked: BigNumberish;
    activeContracts: BigNumberish;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type OrganizationSummaryStructOutput = [
    orgAddress: string,
    name: string,
    email: string,
    totalEmployees: bigint,
    totalSalariesLocked: bigint,
    activeContracts: bigint,
    isActive: boolean,
    createdAt: bigint
  ] & {
    orgAddress: string;
    name: string;
    email: string;
    totalEmployees: bigint;
    totalSalariesLocked: bigint;
    activeContracts: bigint;
    isActive: boolean;
    createdAt: bigint;
  };

  export type EmployeeContractSummaryStruct = {
    contractAddress: AddressLike;
    employer: AddressLike;
    employee: AddressLike;
    dailySalary: BigNumberish;
    attendanceCount: BigNumberish;
    totalWithdrawn: BigNumberish;
    isActive: boolean;
    employeeApproved: boolean;
    startDate: BigNumberish;
  };

  export type EmployeeContractSummaryStructOutput = [
    contractAddress: string,
    employer: string,
    employee: string,
    dailySalary: bigint,
    attendanceCount: bigint,
    totalWithdrawn: bigint,
    isActive: boolean,
    employeeApproved: boolean,
    startDate: bigint
  ] & {
    contractAddress: string;
    employer: string;
    employee: string;
    dailySalary: bigint;
    attendanceCount: bigint;
    totalWithdrawn: bigint;
    isActive: boolean;
    employeeApproved: boolean;
    startDate: bigint;
  };

  export type PlatformStatsStruct = {
    totalOrganizations: BigNumberish;
    totalEmployees: BigNumberish;
    totalSalariesLocked: BigNumberish;
    totalWithdrawn: BigNumberish;
    activeContracts: BigNumberish;
    terminatedContracts: BigNumberish;
  };

  export type PlatformStatsStructOutput = [
    totalOrganizations: bigint,
    totalEmployees: bigint,
    totalSalariesLocked: bigint,
    totalWithdrawn: bigint,
    activeContracts: bigint,
    terminatedContracts: bigint
  ] & {
    totalOrganizations: bigint;
    totalEmployees: bigint;
    totalSalariesLocked: bigint;
    totalWithdrawn: bigint;
    activeContracts: bigint;
    terminatedContracts: bigint;
  };
}

export interface AdminDashboardInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "factory"
      | "getAllOrganizationsSummary"
      | "getContractDetails"
      | "getOrganizationEmployees"
      | "getPlatformStats"
      | "getRecentContracts"
      | "getTopOrganizationsByEmployees"
      | "searchOrganizationByName"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PlatformStatsUpdated"): EventFragment;

  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllOrganizationsSummary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationEmployees",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlatformStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopOrganizationsByEmployees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "searchOrganizationByName",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrganizationsSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlatformStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopOrganizationsByEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "searchOrganizationByName",
    data: BytesLike
  ): Result;
}

export namespace PlatformStatsUpdatedEvent {
  export type InputTuple = [
    totalOrgs: BigNumberish,
    totalEmployees: BigNumberish,
    totalLocked: BigNumberish
  ];
  export type OutputTuple = [
    totalOrgs: bigint,
    totalEmployees: bigint,
    totalLocked: bigint
  ];
  export interface OutputObject {
    totalOrgs: bigint;
    totalEmployees: bigint;
    totalLocked: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AdminDashboard extends BaseContract {
  connect(runner?: ContractRunner | null): AdminDashboard;
  waitForDeployment(): Promise<this>;

  interface: AdminDashboardInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  factory: TypedContractMethod<[], [string], "view">;

  getAllOrganizationsSummary: TypedContractMethod<
    [],
    [AdminDashboard.OrganizationSummaryStructOutput[]],
    "view"
  >;

  getContractDetails: TypedContractMethod<
    [_contractAddress: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        employer: string;
        employee: string;
        dailySalary: bigint;
        attendanceCount: bigint;
        totalWithdrawn: bigint;
        availableBalance: bigint;
        isActive: boolean;
        employeeApproved: boolean;
        isOnProbation: boolean;
        probationPercentage: bigint;
        contractBalance: bigint;
      }
    ],
    "view"
  >;

  getOrganizationEmployees: TypedContractMethod<
    [_orgAddress: AddressLike],
    [AdminDashboard.EmployeeContractSummaryStructOutput[]],
    "view"
  >;

  getPlatformStats: TypedContractMethod<
    [],
    [AdminDashboard.PlatformStatsStructOutput],
    "view"
  >;

  getRecentContracts: TypedContractMethod<
    [_limit: BigNumberish],
    [AdminDashboard.EmployeeContractSummaryStructOutput[]],
    "view"
  >;

  getTopOrganizationsByEmployees: TypedContractMethod<
    [_limit: BigNumberish],
    [AdminDashboard.OrganizationSummaryStructOutput[]],
    "view"
  >;

  searchOrganizationByName: TypedContractMethod<
    [_name: string],
    [AdminDashboard.OrganizationSummaryStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllOrganizationsSummary"
  ): TypedContractMethod<
    [],
    [AdminDashboard.OrganizationSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractDetails"
  ): TypedContractMethod<
    [_contractAddress: AddressLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        employer: string;
        employee: string;
        dailySalary: bigint;
        attendanceCount: bigint;
        totalWithdrawn: bigint;
        availableBalance: bigint;
        isActive: boolean;
        employeeApproved: boolean;
        isOnProbation: boolean;
        probationPercentage: bigint;
        contractBalance: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationEmployees"
  ): TypedContractMethod<
    [_orgAddress: AddressLike],
    [AdminDashboard.EmployeeContractSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlatformStats"
  ): TypedContractMethod<
    [],
    [AdminDashboard.PlatformStatsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecentContracts"
  ): TypedContractMethod<
    [_limit: BigNumberish],
    [AdminDashboard.EmployeeContractSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTopOrganizationsByEmployees"
  ): TypedContractMethod<
    [_limit: BigNumberish],
    [AdminDashboard.OrganizationSummaryStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "searchOrganizationByName"
  ): TypedContractMethod<
    [_name: string],
    [AdminDashboard.OrganizationSummaryStructOutput[]],
    "view"
  >;

  getEvent(
    key: "PlatformStatsUpdated"
  ): TypedContractEvent<
    PlatformStatsUpdatedEvent.InputTuple,
    PlatformStatsUpdatedEvent.OutputTuple,
    PlatformStatsUpdatedEvent.OutputObject
  >;

  filters: {
    "PlatformStatsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      PlatformStatsUpdatedEvent.InputTuple,
      PlatformStatsUpdatedEvent.OutputTuple,
      PlatformStatsUpdatedEvent.OutputObject
    >;
    PlatformStatsUpdated: TypedContractEvent<
      PlatformStatsUpdatedEvent.InputTuple,
      PlatformStatsUpdatedEvent.OutputTuple,
      PlatformStatsUpdatedEvent.OutputObject
    >;
  };
}
